# Generated by Django 5.0 on 2025-10-02 19:14

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ImportBatch',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('batch_id', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('import_type', models.CharField(choices=[('CSV', 'CSV Import'), ('PDF', 'PDF Extraction'), ('MANUAL', 'Manual Entry'), ('API', 'API Integration')], help_text='Type of import operation', max_length=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], db_index=True, default='pending', help_text='Current processing status', max_length=20)),
                ('file_name', models.CharField(blank=True, help_text='Original uploaded file name', max_length=255, null=True)),
                ('file_size', models.BigIntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('file_hash', models.CharField(blank=True, db_index=True, help_text='SHA256 hash for duplicate detection', max_length=64, null=True)),
                ('records_total', models.IntegerField(default=0, help_text='Total records in import file', validators=[django.core.validators.MinValueValidator(0)])),
                ('records_processed', models.IntegerField(default=0, help_text='Number of records processed', validators=[django.core.validators.MinValueValidator(0)])),
                ('records_created', models.IntegerField(default=0, help_text='New records created', validators=[django.core.validators.MinValueValidator(0)])),
                ('records_updated', models.IntegerField(default=0, help_text='Existing records updated', validators=[django.core.validators.MinValueValidator(0)])),
                ('records_skipped', models.IntegerField(default=0, help_text='Records skipped due to errors', validators=[django.core.validators.MinValueValidator(0)])),
                ('quality_score', models.IntegerField(blank=True, help_text='Overall data quality score (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('has_errors', models.BooleanField(default=False, help_text='Whether import encountered any errors')),
                ('error_message', models.TextField(blank=True, help_text='Primary error message if import failed')),
                ('validation_results', models.JSONField(blank=True, default=dict, help_text='Detailed validation results and warnings')),
                ('started_at', models.DateTimeField(blank=True, help_text='When processing actually began', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When processing completed (success or failure)', null=True)),
                ('notes', models.TextField(blank=True, help_text='User notes about this import')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional import metadata and processing details')),
                ('created_by', models.ForeignKey(help_text='User who initiated the import', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'import_batches',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ImportError',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('error_type', models.CharField(choices=[('VALIDATION', 'Validation Error'), ('PROCESSING', 'Processing Error'), ('DUPLICATE', 'Duplicate Record'), ('MISSING_DATA', 'Missing Required Data'), ('FORMAT', 'Format Error'), ('GEOCODING', 'Geocoding Error'), ('BUSINESS_LOGIC', 'Business Logic Error')], max_length=20)),
                ('row_number', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('field_name', models.CharField(blank=True, max_length=100)),
                ('error_message', models.TextField()),
                ('raw_data', models.JSONField(default=dict, help_text='Original row data that caused error')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('import_batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='errors', to='imports.importbatch')),
            ],
            options={
                'db_table': 'import_errors',
                'ordering': ['row_number'],
            },
        ),
        migrations.AddIndex(
            model_name='importbatch',
            index=models.Index(fields=['status', '-created_at'], name='import_batc_status_fd30e1_idx'),
        ),
        migrations.AddIndex(
            model_name='importbatch',
            index=models.Index(fields=['import_type', '-created_at'], name='import_batc_import__e99af7_idx'),
        ),
        migrations.AddIndex(
            model_name='importbatch',
            index=models.Index(fields=['created_by', '-created_at'], name='import_batc_created_f35f09_idx'),
        ),
        migrations.AddIndex(
            model_name='importbatch',
            index=models.Index(fields=['file_hash'], name='import_batc_file_ha_20927f_idx'),
        ),
        migrations.AddIndex(
            model_name='importbatch',
            index=models.Index(fields=['has_errors'], name='import_batc_has_err_b00aac_idx'),
        ),
        migrations.AddIndex(
            model_name='importerror',
            index=models.Index(fields=['import_batch', 'error_type'], name='import_erro_import__142254_idx'),
        ),
        migrations.AddIndex(
            model_name='importerror',
            index=models.Index(fields=['error_type'], name='import_erro_error_t_425008_idx'),
        ),
    ]
